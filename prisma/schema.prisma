// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usuário do sistema (quem faz login)
model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  telefone  String?
  endereco  String?
  senha     String
  criadoEm  DateTime @default(now())
}

// Clientes para quem se vende
model Cliente {
  id        Int      @id @default(autoincrement())
  nome      String
  cpf       String   @unique
  telefone  String
  endereco  String?
  vendas    Venda[]  // 1 cliente → N vendas
}

// Mercadorias que podem ser vendidas
model Mercadoria {
  id               Int           @id @default(autoincrement())
  nome             String
  descricao        String?
  valorUnitario    Float
  quantidadeEstoque Int
  fotos            Foto[]        // 1 mercadoria → N fotos
  itensVenda       ItemVenda[]   // ligação com Venda
}

// Fotos das mercadorias (até 5 por mercadoria)
model Foto {
  id           Int         @id @default(autoincrement())
  mercadoria   Mercadoria  @relation(fields: [mercadoriaId], references: [id])
  mercadoriaId Int
  caminho      String      // ex: "/uploads/produtos/1/img.jpg"
}

// Venda efetuada (à vista ou parcelada)
model Venda {
  id               Int            @id @default(autoincrement())
  cliente          Cliente        @relation(fields: [clienteId], references: [id])
  clienteId        Int
  valorTotal       Float
  tipoPagamento    TipoPagamento
  entrada          Float?         // somente se parcelado
  numParcelas      Int?           // somente se parcelado
  parcelasRestantes Int?          // decrementa a cada pagamento
  criadoEm         DateTime       @default(now())
  itens            ItemVenda[]    // produtos incluídos
  parcelas         Parcela[]      // geração automática
}

// Item de venda: produto + quantidade
model ItemVenda {
  id             Int         @id @default(autoincrement())
  venda          Venda       @relation(fields: [vendaId], references: [id])
  vendaId        Int
  mercadoria     Mercadoria  @relation(fields: [mercadoriaId], references: [id])
  mercadoriaId   Int
  quantidade     Int
  precoUnitario  Float       // cópia de valorUnitario no momento da venda
}

// Parcelas de vendas parceladas
model Parcela {
  id             Int         @id @default(autoincrement())
  venda          Venda       @relation(fields: [vendaId], references: [id])
  vendaId        Int
  numParcela     Int
  valorParcela   Float
  dataVencimento DateTime
  pago           Boolean     @default(false)
  dataPagamento  DateTime?
  comprovante    Comprovante?
}

// Comprovante PDF / arquivo enviado no pagamento
model Comprovante {
  id           Int       @id @default(autoincrement())
  parcela      Parcela   @relation(fields: [parcelaId], references: [id])
  parcelaId    Int       @unique      // Garante relação 1:1
  caminho      String    // ex: "/uploads/comprovantes/123/recibo.pdf"
  recebidoPor  String
  criadoEm     DateTime  @default(now())
}

enum TipoPagamento {
  AVISTA
  PARCELADO
}
