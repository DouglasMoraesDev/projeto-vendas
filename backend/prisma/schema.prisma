// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  telefone  String
  endereco  String?
  senha     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nome      String
  telefone  String
  cpf       String   @unique
  endereco  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendas    Venda[]  // todas as vendas realizadas por este cliente
}

model Mercadoria {
  id               Int       @id @default(autoincrement())
  nome             String
  valorUnitario    Float
  quantidadeEstoque Int
  descricao        String?
  fotos            Foto[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Foto {
  id           Int         @id @default(autoincrement())
  mercadoria   Mercadoria  @relation(fields: [mercadoriaId], references: [id])
  mercadoriaId Int
  path         String
}

model Venda {
  id               Int        @id @default(autoincrement())
  cliente          Cliente    @relation(fields: [clienteId], references: [id])
  clienteId        Int
  dataVenda        DateTime   @default(now())
  tipoPagamento    String     // "avista" ou "parcelado"
  valorTotal       Float
  entrada          Float?     // só se parcelado
  numParcelas      Int?
  parcelasRestantes Int?
  parcelas         Parcela[]
}

model Parcela {
  id             Int      @id @default(autoincrement())
  venda          Venda    @relation(fields: [vendaId], references: [id])
  vendaId        Int
  numParcela     Int
  valorParcela   Float
  dataVencimento DateTime
  pago           Boolean  @default(false)
  dataPagamento  DateTime?
  comprovante    Comprovante?
}

model Comprovante {
  id           Int      @id @default(autoincrement())
  parcela      Parcela  @relation(fields: [parcelaId], references: [id])
  parcelaId    Int      @unique  // garante que cada parcela só tenha 1 comprovante
  arquivoPath  String
  dataUpload   DateTime @default(now())
  recebidoPor  String
}
